# ERA Data Analysis with Bootstrap Resampling
#
# This script contains the main analysis used for the preparation of the
# manuscript
#
# This script performs a comprehensive analysis of agricultural yield data across different
# Agro-Ecological Zones (AEZs) in Africa. Parameters for the analysis are read from YAML
# configuration files located in the config folder. Rather than performing hyperparameter tuning
# (which was done in workflow.R), this script focuses on uncertainty quantification through
# bootstrap resampling to:
#
# 1. Train Random Forest models on each AEZ using pre-identified optimal parameters
# 2. Perform bootstrap sampling (n=99) to quantify uncertainty in predictions and SHAP values
# 3. Calculate model performance metrics (RMSE, RÂ², MAE) on training, test, and OOB samples
# 4. Generate SHAP-based feature importance and interaction plots with confidence intervals
# 5. Create visualizations of yield predictions vs. observations
#
# Key components:
# - Standardized feature names for consistency across analyses
# - Weighted sampling to account for site/study representation differences
# - Comprehensive model validation using both test sets and out-of-bag estimates
# - Uncertainty quantification through bootstrap resampling
# - Normalized feature importance visualization with confidence intervals
# - Performance comparison across different AEZs
#
# Input data contains agricultural yield data with climate variables, soil properties,
# and various agricultural management practices measured across different sites in Africa.
# Results are saved as RDS files and visualizations in the outputs directory.
# start_total_time <- Sys.time()
dir.create("logs", recursive = TRUE, showWarnings = FALSE)
## Load required libraries
if (!identical(normalizePath(getwd()),
normalizePath("/Users/alvaro/My Drive (acarmonacabrero@gmail.com)/Atlas Alvaro/workflow"))){
source('R/get_required_packages.R')
}
library(tidymodels)
library(tidyverse)
library(vip)
library(yaml)
library(plotly)
source('R/load_and_preprocess.R')
source('R/correlation_analysis.R')
source('R/create_splits.R')
source('R/create_model_spec.R')
source('R/create_recipe.R')
source('R/create_workflow.R')
source('R/tune_model.R')
source('R/train_and_test_final_model.R')
source('R/calculate_variable_importance.R')
source('R/create_yield_maps.R')
source('R/shap_mean_importance_plot.R')
source('R/create_normalized_shap_beeswarm_plot.R')
source('R/create_shap_interaction_plot.R')
source('R/weight_functions.R')
source('R/add_mask_column.R')
source('R/create_ale_plots.R')
source('R/create_simple_mask.R')
source('R/predictions_contour.R')
source('R/create_representative_tree.R')
source('R/combine_shap_plots.R')
source('R/save_plot_object.R')
source('R/compute_shap_values.R')
source('R/train_simple_rf.R')
source('R/estimate_metrics_simple_rf.R')
source('R/plot_bootstrap_shap.R')
source('R/plot_bootstrap_shap_gamCI.R')
source('R/summarize_boots_performance.R')
source('R/remap_formula.R')
source('R/normalize_features.R')
source('R/plot_aez_distribution.R')
source('R/plot_categorical_shap.R')
source('R/create_performance_table.R')
source('R/estimate_ind_cv_performance.R')
source("R/create_and_save_obs_pred_plot.R")
source("R/combine_pred_obs_plots.R")
### Set experiment name and read configuration
args <- commandArgs(trailingOnly = TRUE)
experiment <- args[1]
AEZ <- args[2]
AEZ_list <- c("Warm.Semiarid", "Warm.Subhumid", "Warm.Humid",
"Cool.Semiarid", "Cool.Subhumid", "Cool.Humid")
# AEZ_list <- c("Warm.Semiarid")  # Run just this AEZ
experiment <- "no_outliers_eco_isqrt_nosoil"  # MANUAL SETTINGS
experiment_t <- experiment
if (is.na(AEZ)){
AEZ <- "Warm.Semiarid"  # MANUAL SETTINGS
}
config <- yaml::read_yaml(paste0("config/", experiment, "_config.yaml"))
config
create_colour_features <- TRUE
create_plotly <- TRUE
n_bootstraps <- 99  # NUMBER OF BOOTSTRAPS
# Feature mapping
feature_mapping <- c(
"Rain.Days.L.1" = "Fraction_Rainy_Days",
"Mean_clay_tot_psa" = "Clay",
"Mean_sand_tot_psa" = "Sand",
"Mean_ecec.f" = "ECEC",
"Mean_OC" = "OC",
"Presowing.Rain.sum" = "Presowing_Rainfall",
"Rain.sum" = "Total_Rainfall",
"Rain.sum.Dev.Mean" = "Total_Rainfall_Dev",
"Tmax.mean" = "Avg_Max_Temp",
"Rain.Days.L.1.Dev.Mean" = "Fraction_Rainy_Days_Dev",
"Rain.Max.RSeq.5" = "Longest_Dry_Spell",
"Tmax.mean.Dev.Mean" = "Avg_Max_Temp_Dev",
"yield" = "Yield"
)
## Initialize bootstrap and full data model storage
bootstrap_results <- list(
train_metrics = list(),
oob_metrics = list(),
test_metrics = list(),
MDA_importance = list(),
shap_values = list()
)
full_results <- list(
train_metrics = list(),
oob_metrics = list(),
test_metrics = list(),
MDA_importance = list(),
shap_values = list()
)
## Data settings from config
data_path <- config$data_path
target <- config$target
formula_string <- gsub("\\s+", " ", config$general_formula)
formula_string <- gsub('"', '', formula_string)
formula_string <- trimws(formula_string)
general_formula <- as.formula(formula_string)
general_formula <- remap_formula(formula_string,
feature_mapping)
weighted <- config$weighted
# Preprocessing settings
imputation_method <- config$preprocessing$imputation_method
lower_quantile <- config$preprocessing$lower_quantile
upper_quantile <- config$preprocessing$upper_quantile
# Data splitting settings
train_prop <- config$splits$train_prop
n_cv_folds <- config$splits$cv_folds
cv_seed <- config$splits$seed
## Load and preprocess data
data <- load_and_preprocess(data_path = data_path,
target_col = target,
cols_to_remove = NULL,
imputation_method = imputation_method,
lower_quantile = lower_quantile,
upper_quantile = upper_quantile)
data <- load_and_preprocess(data_path = data_path,
target_col = target,
cols_to_remove = NULL,
imputation_method = imputation_method,
lower_quantile = lower_quantile,
upper_quantile = upper_quantile)
N_obs_table <- data %>% select(AEZ16simple) %>% table()
AEZ_table_names <- names(N_obs_table)
N_obs_df <- data.frame(
AEZ = AEZ_list,
N_obs = as.numeric(N_obs_table[AEZ_list])
)
plot_aez_distribution(data, experiment)
existing_cols <- names(feature_mapping)[names(feature_mapping)
%in% names(data)]
data <- data %>%
rename(!!!setNames(existing_cols, feature_mapping[existing_cols]))
target <- str_replace_all(target, feature_mapping)
# List of features to plot
feature_list <- all.vars(general_formula)[-1]
normalized_data <- normalize_features(data,
feature_list)
